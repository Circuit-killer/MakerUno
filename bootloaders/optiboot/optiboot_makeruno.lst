
optiboot_atmega328.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00007fcc  00000260  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001cc  00007e00  00007e00  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .version      00000002  00007ffe  00007ffe  00000260  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .stab         00000c3c  00000000  00000000  00000264  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d85  00000000  00000000  00000ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00001c25  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00007e00 <main>:
    7e00:	1f 92       	push	r1
    7e02:	cd b7       	in	r28, 0x3d	; 61
    7e04:	de b7       	in	r29, 0x3e	; 62
    7e06:	8a b1       	in	r24, 0x0a	; 10
    7e08:	8c 6f       	ori	r24, 0xFC	; 252
    7e0a:	8a b9       	out	0x0a, r24	; 10
    7e0c:	8b b1       	in	r24, 0x0b	; 11
    7e0e:	83 70       	andi	r24, 0x03	; 3
    7e10:	8b b9       	out	0x0b, r24	; 11
    7e12:	87 b1       	in	r24, 0x07	; 7
    7e14:	8f 63       	ori	r24, 0x3F	; 63
    7e16:	87 b9       	out	0x07, r24	; 7
    7e18:	88 b1       	in	r24, 0x08	; 8
    7e1a:	80 7c       	andi	r24, 0xC0	; 192
    7e1c:	88 b9       	out	0x08, r24	; 8
    7e1e:	84 b1       	in	r24, 0x04	; 4
    7e20:	8f 63       	ori	r24, 0x3F	; 63
    7e22:	84 b9       	out	0x04, r24	; 4
    7e24:	85 b1       	in	r24, 0x05	; 5
    7e26:	80 7c       	andi	r24, 0xC0	; 192
    7e28:	85 b9       	out	0x05, r24	; 5
    7e2a:	11 24       	eor	r1, r1
    7e2c:	84 b7       	in	r24, 0x34	; 52
    7e2e:	14 be       	out	0x34, r1	; 52
    7e30:	98 2f       	mov	r25, r24
    7e32:	9d 70       	andi	r25, 0x0D	; 13
    7e34:	09 f0       	breq	.+2      	; 0x7e38 <main+0x38>
    7e36:	c4 d0       	rcall	.+392    	; 0x7fc0 <appStart>
    7e38:	82 e0       	ldi	r24, 0x02	; 2
    7e3a:	80 93 c0 00 	sts	0x00C0, r24
    7e3e:	88 e1       	ldi	r24, 0x18	; 24
    7e40:	80 93 c1 00 	sts	0x00C1, r24
    7e44:	86 e0       	ldi	r24, 0x06	; 6
    7e46:	80 93 c2 00 	sts	0x00C2, r24
    7e4a:	80 e1       	ldi	r24, 0x10	; 16
    7e4c:	80 93 c4 00 	sts	0x00C4, r24
    7e50:	8e e0       	ldi	r24, 0x0E	; 14
    7e52:	a1 d0       	rcall	.+322    	; 0x7f96 <watchdogConfig>
    7e54:	81 2c       	mov	r8, r1
    7e56:	91 2c       	mov	r9, r1
    7e58:	13 e0       	ldi	r17, 0x03	; 3
    7e5a:	01 e0       	ldi	r16, 0x01	; 1
    7e5c:	25 e0       	ldi	r18, 0x05	; 5
    7e5e:	f2 2e       	mov	r15, r18
    7e60:	31 e1       	ldi	r19, 0x11	; 17
    7e62:	e3 2e       	mov	r14, r19
    7e64:	8c d0       	rcall	.+280    	; 0x7f7e <getch>
    7e66:	81 34       	cpi	r24, 0x41	; 65
    7e68:	79 f4       	brne	.+30     	; 0x7e88 <main+0x88>
    7e6a:	89 d0       	rcall	.+274    	; 0x7f7e <getch>
    7e6c:	89 83       	std	Y+1, r24	; 0x01
    7e6e:	99 d0       	rcall	.+306    	; 0x7fa2 <verifySpace>
    7e70:	89 81       	ldd	r24, Y+1	; 0x01
    7e72:	82 38       	cpi	r24, 0x82	; 130
    7e74:	11 f4       	brne	.+4      	; 0x7e7a <main+0x7a>
    7e76:	82 e0       	ldi	r24, 0x02	; 2
    7e78:	05 c0       	rjmp	.+10     	; 0x7e84 <main+0x84>
    7e7a:	81 38       	cpi	r24, 0x81	; 129
    7e7c:	11 f4       	brne	.+4      	; 0x7e82 <main+0x82>
    7e7e:	86 e0       	ldi	r24, 0x06	; 6
    7e80:	01 c0       	rjmp	.+2      	; 0x7e84 <main+0x84>
    7e82:	83 e0       	ldi	r24, 0x03	; 3
    7e84:	75 d0       	rcall	.+234    	; 0x7f70 <putch>
    7e86:	71 c0       	rjmp	.+226    	; 0x7f6a <main+0x16a>
    7e88:	82 34       	cpi	r24, 0x42	; 66
    7e8a:	11 f4       	brne	.+4      	; 0x7e90 <main+0x90>
    7e8c:	84 e1       	ldi	r24, 0x14	; 20
    7e8e:	03 c0       	rjmp	.+6      	; 0x7e96 <main+0x96>
    7e90:	85 34       	cpi	r24, 0x45	; 69
    7e92:	19 f4       	brne	.+6      	; 0x7e9a <main+0x9a>
    7e94:	85 e0       	ldi	r24, 0x05	; 5
    7e96:	8d d0       	rcall	.+282    	; 0x7fb2 <getNch>
    7e98:	68 c0       	rjmp	.+208    	; 0x7f6a <main+0x16a>
    7e9a:	85 35       	cpi	r24, 0x55	; 85
    7e9c:	49 f4       	brne	.+18     	; 0x7eb0 <main+0xb0>
    7e9e:	6f d0       	rcall	.+222    	; 0x7f7e <getch>
    7ea0:	d8 2e       	mov	r13, r24
    7ea2:	6d d0       	rcall	.+218    	; 0x7f7e <getch>
    7ea4:	8d 2c       	mov	r8, r13
    7ea6:	91 2c       	mov	r9, r1
    7ea8:	98 2a       	or	r9, r24
    7eaa:	88 0c       	add	r8, r8
    7eac:	99 1c       	adc	r9, r9
    7eae:	5c c0       	rjmp	.+184    	; 0x7f68 <main+0x168>
    7eb0:	86 35       	cpi	r24, 0x56	; 86
    7eb2:	21 f4       	brne	.+8      	; 0x7ebc <main+0xbc>
    7eb4:	84 e0       	ldi	r24, 0x04	; 4
    7eb6:	7d d0       	rcall	.+250    	; 0x7fb2 <getNch>
    7eb8:	80 e0       	ldi	r24, 0x00	; 0
    7eba:	e4 cf       	rjmp	.-56     	; 0x7e84 <main+0x84>
    7ebc:	84 36       	cpi	r24, 0x64	; 100
    7ebe:	09 f0       	breq	.+2      	; 0x7ec2 <main+0xc2>
    7ec0:	36 c0       	rjmp	.+108    	; 0x7f2e <main+0x12e>
    7ec2:	5d d0       	rcall	.+186    	; 0x7f7e <getch>
    7ec4:	5c d0       	rcall	.+184    	; 0x7f7e <getch>
    7ec6:	d8 2e       	mov	r13, r24
    7ec8:	5a d0       	rcall	.+180    	; 0x7f7e <getch>
    7eca:	c8 2e       	mov	r12, r24
    7ecc:	a1 2c       	mov	r10, r1
    7ece:	bb 24       	eor	r11, r11
    7ed0:	b3 94       	inc	r11
    7ed2:	55 d0       	rcall	.+170    	; 0x7f7e <getch>
    7ed4:	f5 01       	movw	r30, r10
    7ed6:	81 93       	st	Z+, r24
    7ed8:	5f 01       	movw	r10, r30
    7eda:	de 12       	cpse	r13, r30
    7edc:	fa cf       	rjmp	.-12     	; 0x7ed2 <main+0xd2>
    7ede:	61 d0       	rcall	.+194    	; 0x7fa2 <verifySpace>
    7ee0:	f5 e4       	ldi	r31, 0x45	; 69
    7ee2:	cf 12       	cpse	r12, r31
    7ee4:	01 c0       	rjmp	.+2      	; 0x7ee8 <main+0xe8>
    7ee6:	ff cf       	rjmp	.-2      	; 0x7ee6 <main+0xe6>
    7ee8:	f4 01       	movw	r30, r8
    7eea:	17 bf       	out	0x37, r17	; 55
    7eec:	e8 95       	spm
    7eee:	07 b6       	in	r0, 0x37	; 55
    7ef0:	00 fc       	sbrc	r0, 0
    7ef2:	fd cf       	rjmp	.-6      	; 0x7eee <main+0xee>
    7ef4:	a4 01       	movw	r20, r8
    7ef6:	a0 e0       	ldi	r26, 0x00	; 0
    7ef8:	b1 e0       	ldi	r27, 0x01	; 1
    7efa:	2c 91       	ld	r18, X
    7efc:	12 96       	adiw	r26, 0x02	; 2
    7efe:	cd 01       	movw	r24, r26
    7f00:	01 97       	sbiw	r24, 0x01	; 1
    7f02:	fc 01       	movw	r30, r24
    7f04:	80 81       	ld	r24, Z
    7f06:	30 e0       	ldi	r19, 0x00	; 0
    7f08:	38 2b       	or	r19, r24
    7f0a:	fa 01       	movw	r30, r20
    7f0c:	09 01       	movw	r0, r18
    7f0e:	07 bf       	out	0x37, r16	; 55
    7f10:	e8 95       	spm
    7f12:	11 24       	eor	r1, r1
    7f14:	4e 5f       	subi	r20, 0xFE	; 254
    7f16:	5f 4f       	sbci	r21, 0xFF	; 255
    7f18:	da 12       	cpse	r13, r26
    7f1a:	ef cf       	rjmp	.-34     	; 0x7efa <main+0xfa>
    7f1c:	f4 01       	movw	r30, r8
    7f1e:	f7 be       	out	0x37, r15	; 55
    7f20:	e8 95       	spm
    7f22:	07 b6       	in	r0, 0x37	; 55
    7f24:	00 fc       	sbrc	r0, 0
    7f26:	fd cf       	rjmp	.-6      	; 0x7f22 <main+0x122>
    7f28:	e7 be       	out	0x37, r14	; 55
    7f2a:	e8 95       	spm
    7f2c:	1e c0       	rjmp	.+60     	; 0x7f6a <main+0x16a>
    7f2e:	84 37       	cpi	r24, 0x74	; 116
    7f30:	71 f4       	brne	.+28     	; 0x7f4e <main+0x14e>
    7f32:	25 d0       	rcall	.+74     	; 0x7f7e <getch>
    7f34:	24 d0       	rcall	.+72     	; 0x7f7e <getch>
    7f36:	d8 2e       	mov	r13, r24
    7f38:	22 d0       	rcall	.+68     	; 0x7f7e <getch>
    7f3a:	33 d0       	rcall	.+102    	; 0x7fa2 <verifySpace>
    7f3c:	54 01       	movw	r10, r8
    7f3e:	f5 01       	movw	r30, r10
    7f40:	85 91       	lpm	r24, Z+
    7f42:	5f 01       	movw	r10, r30
    7f44:	15 d0       	rcall	.+42     	; 0x7f70 <putch>
    7f46:	da 94       	dec	r13
    7f48:	d1 10       	cpse	r13, r1
    7f4a:	f9 cf       	rjmp	.-14     	; 0x7f3e <main+0x13e>
    7f4c:	0e c0       	rjmp	.+28     	; 0x7f6a <main+0x16a>
    7f4e:	85 37       	cpi	r24, 0x75	; 117
    7f50:	39 f4       	brne	.+14     	; 0x7f60 <main+0x160>
    7f52:	27 d0       	rcall	.+78     	; 0x7fa2 <verifySpace>
    7f54:	8e e1       	ldi	r24, 0x1E	; 30
    7f56:	0c d0       	rcall	.+24     	; 0x7f70 <putch>
    7f58:	85 e9       	ldi	r24, 0x95	; 149
    7f5a:	0a d0       	rcall	.+20     	; 0x7f70 <putch>
    7f5c:	8f e0       	ldi	r24, 0x0F	; 15
    7f5e:	92 cf       	rjmp	.-220    	; 0x7e84 <main+0x84>
    7f60:	81 35       	cpi	r24, 0x51	; 81
    7f62:	11 f4       	brne	.+4      	; 0x7f68 <main+0x168>
    7f64:	88 e0       	ldi	r24, 0x08	; 8
    7f66:	17 d0       	rcall	.+46     	; 0x7f96 <watchdogConfig>
    7f68:	1c d0       	rcall	.+56     	; 0x7fa2 <verifySpace>
    7f6a:	80 e1       	ldi	r24, 0x10	; 16
    7f6c:	01 d0       	rcall	.+2      	; 0x7f70 <putch>
    7f6e:	7a cf       	rjmp	.-268    	; 0x7e64 <main+0x64>

00007f70 <putch>:
}

void putch(char ch)
{
#ifndef SOFT_UART
  while (!(UART_SRA & _BV(UDRE0)))
    7f70:	90 91 c0 00 	lds	r25, 0x00C0
    7f74:	95 ff       	sbrs	r25, 5
    7f76:	fc cf       	rjmp	.-8      	; 0x7f70 <putch>
    ;
  UART_UDR = ch;
    7f78:	80 93 c6 00 	sts	0x00C6, r24
    7f7c:	08 95       	ret

00007f7e <getch>:
      [bitCnt] "d"(9),
      [uartPin] "I"(_SFR_IO_ADDR(UART_PIN)),
      [uartBit] "I"(UART_RX_BIT)
      : "r25");
#else
  while (!(UART_SRA & _BV(RXC0)))
    7f7e:	80 91 c0 00 	lds	r24, 0x00C0
    7f82:	87 ff       	sbrs	r24, 7
    7f84:	fc cf       	rjmp	.-8      	; 0x7f7e <getch>
    ;
  if (!(UART_SRA & _BV(FE0)))
    7f86:	80 91 c0 00 	lds	r24, 0x00C0
    7f8a:	84 fd       	sbrc	r24, 4
    7f8c:	01 c0       	rjmp	.+2      	; 0x7f90 <getch+0x12>
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset()
{
  __asm__ __volatile__(
    7f8e:	a8 95       	wdr
       * don't care that an invalid char is returned...)
       */
    watchdogReset();
  }

  ch = UART_UDR;
    7f90:	80 91 c6 00 	lds	r24, 0x00C6
  LED_PIN |= _BV(LED);
#endif
#endif

  return ch;
}
    7f94:	08 95       	ret

00007f96 <watchdogConfig>:
      "wdr\n");
}

void watchdogConfig(uint8_t x)
{
  WDTCSR = _BV(WDCE) | _BV(WDE);
    7f96:	e0 e6       	ldi	r30, 0x60	; 96
    7f98:	f0 e0       	ldi	r31, 0x00	; 0
    7f9a:	98 e1       	ldi	r25, 0x18	; 24
    7f9c:	90 83       	st	Z, r25
  WDTCSR = x;
    7f9e:	80 83       	st	Z, r24
    7fa0:	08 95       	ret

00007fa2 <verifySpace>:
  verifySpace();
}

void verifySpace()
{
  if (getch() != CRC_EOP)
    7fa2:	ed df       	rcall	.-38     	; 0x7f7e <getch>
    7fa4:	80 32       	cpi	r24, 0x20	; 32
    7fa6:	19 f0       	breq	.+6      	; 0x7fae <verifySpace+0xc>
  {
    watchdogConfig(WATCHDOG_16MS); // shorten WD timeout
    7fa8:	88 e0       	ldi	r24, 0x08	; 8
    7faa:	f5 df       	rcall	.-22     	; 0x7f96 <watchdogConfig>
    while (1)                      // and busy-loop so that WD causes
      ;                            //  a reset and app start.
    7fac:	ff cf       	rjmp	.-2      	; 0x7fac <verifySpace+0xa>
  }
  putch(STK_INSYNC);
    7fae:	84 e1       	ldi	r24, 0x14	; 20
    7fb0:	df cf       	rjmp	.-66     	; 0x7f70 <putch>

00007fb2 <getNch>:
      "ret\n" ::[count] "M"(UART_B_VALUE));
}
#endif

void getNch(uint8_t count)
{
    7fb2:	cf 93       	push	r28
    7fb4:	c8 2f       	mov	r28, r24
  do
    getch();
    7fb6:	e3 df       	rcall	.-58     	; 0x7f7e <getch>
  while (--count);
    7fb8:	c1 50       	subi	r28, 0x01	; 1
    7fba:	e9 f7       	brne	.-6      	; 0x7fb6 <getNch+0x4>
  verifySpace();
}
    7fbc:	cf 91       	pop	r28
void getNch(uint8_t count)
{
  do
    getch();
  while (--count);
  verifySpace();
    7fbe:	f1 cf       	rjmp	.-30     	; 0x7fa2 <verifySpace>

00007fc0 <appStart>:
void appStart(uint8_t rstFlags)
{
  // save the reset flags in the designated register
  //  This can be saved in a main program by putting code in .init0 (which
  //  executes before normal c init code) to save R2 to a global variable.
  __asm__ __volatile__("mov r2, %0\n" ::"r"(rstFlags));
    7fc0:	28 2e       	mov	r2, r24

  watchdogConfig(WATCHDOG_OFF);
    7fc2:	80 e0       	ldi	r24, 0x00	; 0
    7fc4:	e8 df       	rcall	.-48     	; 0x7f96 <watchdogConfig>
  // Note that appstart_vec is defined so that this works with either
  // real or virtual boot partitions.
  __asm__ __volatile__(
    7fc6:	e0 e0       	ldi	r30, 0x00	; 0
    7fc8:	ff 27       	eor	r31, r31
    7fca:	09 94       	ijmp
